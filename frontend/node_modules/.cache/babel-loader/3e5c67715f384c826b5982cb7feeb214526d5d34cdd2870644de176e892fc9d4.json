{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sebal\\\\Desktop\\\\API v3\\\\API-s-main\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// Importar React y hooks necesarios para el contexto de autenticación\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\n\n// Crear el contexto de autenticación que será compartido por toda la aplicación\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Hook personalizado para acceder al contexto de autenticación desde cualquier componente\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext); // Obtener el contexto actual\n  if (!context) {\n    // Lanzar error si el hook se usa fuera del AuthProvider\n    throw new Error(\"useAuth debe ser usado dentro de AuthProvider\");\n  }\n  return context; // Retornar el contexto con todas las funciones y estados\n};\n\n// Componente proveedor que envuelve la aplicación y proporciona el estado de autenticación\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null); // Estado para almacenar los datos del usuario autenticado\n  const [loading, setLoading] = useState(true); // Estado para controlar la carga inicial\n\n  // Función utilitaria para limpiar todos los datos de autenticación del localStorage\n  const clearAuthData = () => {\n    localStorage.removeItem(\"token\"); // Eliminar token de autenticación\n    localStorage.removeItem(\"userName\"); // Eliminar nombre del usuario\n    localStorage.removeItem(\"userSurname\"); // Eliminar apellido del usuario\n    localStorage.removeItem(\"userDni\"); // Eliminar DNI del usuario\n    localStorage.removeItem(\"userProfilePhoto\"); // Eliminar foto de perfil\n    localStorage.removeItem(\"userEmail\"); // Eliminar email del usuario\n  };\n\n  // useEffect que se ejecuta al montar el componente para verificar autenticación existente\n  useEffect(() => {\n    // Verificar si hay un token guardado en localStorage al cargar la aplicación\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      try {\n        // Decodificar el token (no es JWT, es un token personalizado codificado en base64)\n        const decodedString = decodeURIComponent(atob(token));\n        const payload = JSON.parse(decodedString); // Parsear el JSON del token\n        const currentTime = Date.now(); // Obtener tiempo actual para verificar expiración\n\n        if (payload.exp > currentTime) {\n          var _payload$role;\n          // Token válido y no expirado - restaurar estado del usuario\n          setUser({\n            email: payload.email,\n            // Email del token\n            roles: [((_payload$role = payload.role) === null || _payload$role === void 0 ? void 0 : _payload$role.toUpperCase()) || \"USER\"],\n            // Rol del usuario (convertido a mayúsculas)\n            name: localStorage.getItem(\"userName\") || payload.email,\n            // Nombre guardado o email como fallback\n            surname: localStorage.getItem(\"userSurname\") || \"\",\n            // Apellido guardado o vacío\n            dni: localStorage.getItem(\"userDni\") || \"\",\n            // DNI guardado o vacío\n            profilePhoto: localStorage.getItem(\"userProfilePhoto\") || null,\n            // Foto de perfil o null\n            id: payload.id // ID del usuario del token\n          });\n        } else {\n          // Token expirado - limpiar datos de autenticación\n          clearAuthData();\n        }\n      } catch (error) {\n        console.error(\"Token corrupto detectado, limpiando localStorage:\", error);\n        // Token malformado o corrupto - limpiar todo para evitar errores\n        clearAuthData();\n      }\n    }\n    setLoading(false); // Finalizar estado de carga\n  }, []); // Array vacío significa que solo se ejecuta una vez al montar\n\n  // Función para iniciar sesión - guarda datos del usuario y token en localStorage\n  const login = (token, userName, userSurname = \"\", userEmail = \"\", userDni = \"\", userProfilePhoto = null) => {\n    localStorage.setItem(\"token\", token); // Guardar token de autenticación\n    localStorage.setItem(\"userName\", userName); // Guardar nombre del usuario\n    localStorage.setItem(\"userSurname\", userSurname); // Guardar apellido del usuario\n    localStorage.setItem(\"userEmail\", userEmail); // Guardar email del usuario\n    localStorage.setItem(\"userDni\", userDni); // Guardar DNI del usuario\n    localStorage.setItem(\"userProfilePhoto\", userProfilePhoto || \"\"); // Guardar foto de perfil o cadena vacía\n\n    try {\n      var _payload$role2;\n      // Decodificar el token personalizado (no es JWT estándar)\n      const decodedString = decodeURIComponent(atob(token));\n      const payload = JSON.parse(decodedString); // Extraer datos del token\n      // Actualizar estado del usuario con los datos proporcionados y del token\n      setUser({\n        email: userEmail || payload.email,\n        // Usar email proporcionado o del token\n        roles: [((_payload$role2 = payload.role) === null || _payload$role2 === void 0 ? void 0 : _payload$role2.toUpperCase()) || \"USER\"],\n        // Rol del token o USER por defecto\n        name: userName,\n        // Nombre proporcionado\n        surname: userSurname,\n        // Apellido proporcionado\n        dni: userDni,\n        // DNI proporcionado\n        profilePhoto: userProfilePhoto,\n        // Foto proporcionada\n        id: payload.id // ID del token\n      });\n    } catch (error) {\n      console.error(\"Error al decodificar token:\", error);\n    }\n  };\n\n  // Función para cerrar sesión - limpia todos los datos del usuario\n  const logout = () => {\n    clearAuthData(); // Limpiar localStorage\n    setUser(null); // Resetear estado del usuario\n  };\n\n  // Función para verificar si el usuario está autenticado\n  const isAuthenticated = () => {\n    const token = localStorage.getItem(\"token\"); // Obtener token del localStorage\n    return user !== null && token !== null; // Verificar que existan tanto user como token\n  };\n\n  // Objeto con todos los valores y funciones que se proporcionarán a los componentes hijos\n  const value = {\n    user,\n    // Estado actual del usuario\n    login,\n    // Función para iniciar sesión\n    logout,\n    // Función para cerrar sesión\n    isAuthenticated,\n    // Función para verificar autenticación\n    loading // Estado de carga\n  };\n\n  // Proveedor del contexto que envuelve los componentes hijos\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","clearAuthData","localStorage","removeItem","token","getItem","decodedString","decodeURIComponent","atob","payload","JSON","parse","currentTime","Date","now","exp","_payload$role","email","roles","role","toUpperCase","name","surname","dni","profilePhoto","id","error","console","login","userName","userSurname","userEmail","userDni","userProfilePhoto","setItem","_payload$role2","logout","isAuthenticated","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sebal/Desktop/API v3/API-s-main/frontend/src/context/AuthContext.js"],"sourcesContent":["// Importar React y hooks necesarios para el contexto de autenticación\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\n\n// Crear el contexto de autenticación que será compartido por toda la aplicación\nconst AuthContext = createContext();\n\n// Hook personalizado para acceder al contexto de autenticación desde cualquier componente\nexport const useAuth = () => {\n  const context = useContext(AuthContext); // Obtener el contexto actual\n  if (!context) {\n    // Lanzar error si el hook se usa fuera del AuthProvider\n    throw new Error(\"useAuth debe ser usado dentro de AuthProvider\");\n  }\n  return context; // Retornar el contexto con todas las funciones y estados\n};\n\n// Componente proveedor que envuelve la aplicación y proporciona el estado de autenticación\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null); // Estado para almacenar los datos del usuario autenticado\n  const [loading, setLoading] = useState(true); // Estado para controlar la carga inicial\n\n  // Función utilitaria para limpiar todos los datos de autenticación del localStorage\n  const clearAuthData = () => {\n    localStorage.removeItem(\"token\"); // Eliminar token de autenticación\n    localStorage.removeItem(\"userName\"); // Eliminar nombre del usuario\n    localStorage.removeItem(\"userSurname\"); // Eliminar apellido del usuario\n    localStorage.removeItem(\"userDni\"); // Eliminar DNI del usuario\n    localStorage.removeItem(\"userProfilePhoto\"); // Eliminar foto de perfil\n    localStorage.removeItem(\"userEmail\"); // Eliminar email del usuario\n  };\n\n  // useEffect que se ejecuta al montar el componente para verificar autenticación existente\n  useEffect(() => {\n    // Verificar si hay un token guardado en localStorage al cargar la aplicación\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      try {\n        // Decodificar el token (no es JWT, es un token personalizado codificado en base64)\n        const decodedString = decodeURIComponent(atob(token));\n        const payload = JSON.parse(decodedString); // Parsear el JSON del token\n        const currentTime = Date.now(); // Obtener tiempo actual para verificar expiración\n\n        if (payload.exp > currentTime) {\n          // Token válido y no expirado - restaurar estado del usuario\n          setUser({\n            email: payload.email, // Email del token\n            roles: [payload.role?.toUpperCase() || \"USER\"], // Rol del usuario (convertido a mayúsculas)\n            name: localStorage.getItem(\"userName\") || payload.email, // Nombre guardado o email como fallback\n            surname: localStorage.getItem(\"userSurname\") || \"\", // Apellido guardado o vacío\n            dni: localStorage.getItem(\"userDni\") || \"\", // DNI guardado o vacío\n            profilePhoto: localStorage.getItem(\"userProfilePhoto\") || null, // Foto de perfil o null\n            id: payload.id // ID del usuario del token\n          });\n        } else {\n          // Token expirado - limpiar datos de autenticación\n          clearAuthData();\n        }\n      } catch (error) {\n        console.error(\"Token corrupto detectado, limpiando localStorage:\", error);\n        // Token malformado o corrupto - limpiar todo para evitar errores\n        clearAuthData();\n      }\n    }\n    setLoading(false); // Finalizar estado de carga\n  }, []); // Array vacío significa que solo se ejecuta una vez al montar\n\n  // Función para iniciar sesión - guarda datos del usuario y token en localStorage\n  const login = (token, userName, userSurname = \"\", userEmail = \"\", userDni = \"\", userProfilePhoto = null) => {\n    localStorage.setItem(\"token\", token); // Guardar token de autenticación\n    localStorage.setItem(\"userName\", userName); // Guardar nombre del usuario\n    localStorage.setItem(\"userSurname\", userSurname); // Guardar apellido del usuario\n    localStorage.setItem(\"userEmail\", userEmail); // Guardar email del usuario\n    localStorage.setItem(\"userDni\", userDni); // Guardar DNI del usuario\n    localStorage.setItem(\"userProfilePhoto\", userProfilePhoto || \"\"); // Guardar foto de perfil o cadena vacía\n\n    try {\n      // Decodificar el token personalizado (no es JWT estándar)\n      const decodedString = decodeURIComponent(atob(token));\n      const payload = JSON.parse(decodedString); // Extraer datos del token\n      // Actualizar estado del usuario con los datos proporcionados y del token\n      setUser({\n        email: userEmail || payload.email, // Usar email proporcionado o del token\n        roles: [payload.role?.toUpperCase() || \"USER\"], // Rol del token o USER por defecto\n        name: userName, // Nombre proporcionado\n        surname: userSurname, // Apellido proporcionado\n        dni: userDni, // DNI proporcionado\n        profilePhoto: userProfilePhoto, // Foto proporcionada\n        id: payload.id // ID del token\n      });\n    } catch (error) {\n      console.error(\"Error al decodificar token:\", error);\n    }\n  };\n\n  // Función para cerrar sesión - limpia todos los datos del usuario\n  const logout = () => {\n    clearAuthData(); // Limpiar localStorage\n    setUser(null); // Resetear estado del usuario\n  };\n\n  // Función para verificar si el usuario está autenticado\n  const isAuthenticated = () => {\n    const token = localStorage.getItem(\"token\"); // Obtener token del localStorage\n    return user !== null && token !== null; // Verificar que existan tanto user como token\n  };\n\n  // Objeto con todos los valores y funciones que se proporcionarán a los componentes hijos\n  const value = {\n    user, // Estado actual del usuario\n    login, // Función para iniciar sesión\n    logout, // Función para cerrar sesión\n    isAuthenticated, // Función para verificar autenticación\n    loading // Estado de carga\n  };\n\n  // Proveedor del contexto que envuelve los componentes hijos\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}