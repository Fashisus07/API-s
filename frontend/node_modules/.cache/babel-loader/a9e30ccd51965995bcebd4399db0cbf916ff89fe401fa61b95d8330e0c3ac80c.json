{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sebal\\\\Desktop\\\\API v3\\\\API-s-main\\\\frontend\\\\src\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// Importar React y hooks necesarios para el contexto del carrito de compras\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { useAuth } from \"./AuthContext\"; // Importar contexto de autenticación para obtener datos del usuario\n\n// Crear el contexto del carrito que será compartido por toda la aplicación\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\n\n// Hook personalizado para acceder al contexto del carrito desde cualquier componente\nexport const useCart = () => {\n  _s();\n  const context = useContext(CartContext); // Obtener el contexto actual\n  if (!context) {\n    // Lanzar error si el hook se usa fuera del CartProvider\n    throw new Error(\"useCart debe ser usado dentro de CartProvider\");\n  }\n  return context; // Retornar el contexto con todas las funciones y estados\n};\n\n// Componente proveedor que envuelve la aplicación y proporciona el estado del carrito\n_s(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const CartProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    user\n  } = useAuth(); // Obtener datos del usuario autenticado\n  const [cartItems, setCartItems] = useState([]); // Estado para almacenar los productos del carrito\n  const [loading, setLoading] = useState(true); // Estado para controlar la carga inicial\n\n  // Función para generar la clave única del carrito basada en el usuario\n  const getCartKey = () => {\n    // Si hay usuario autenticado, usar su email; si no, usar carrito de invitado\n    return user !== null && user !== void 0 && user.email ? `cart_${user.email}` : 'cart_guest';\n  };\n\n  // useEffect que se ejecuta cuando cambia el usuario para cargar su carrito específico\n  useEffect(() => {\n    const cartKey = getCartKey(); // Obtener clave del carrito para el usuario actual\n    const savedCart = localStorage.getItem(cartKey); // Buscar carrito guardado en localStorage\n\n    if (savedCart) {\n      try {\n        setCartItems(JSON.parse(savedCart)); // Parsear y cargar productos del carrito guardado\n      } catch (error) {\n        console.error('Error al cargar carrito:', error);\n        localStorage.removeItem(cartKey); // Eliminar carrito corrupto\n        setCartItems([]); // Resetear carrito si no hay datos guardados\n      }\n    } else {\n      setCartItems([]); // Inicializar carrito vacío si no hay datos guardados\n    }\n    setLoading(false); // Finalizar estado de carga\n  }, [user]); // Dependencia: se ejecuta cuando cambia el usuario\n\n  // useEffect para guardar automáticamente el carrito en localStorage cuando cambie\n  useEffect(() => {\n    if (!loading) {\n      // Solo guardar si no está en estado de carga\n      const cartKey = getCartKey(); // Obtener clave del carrito\n      localStorage.setItem(cartKey, JSON.stringify(cartItems)); // Guardar carrito serializado\n    }\n  }, [cartItems, loading, user]); // Dependencias: carrito, carga y usuario\n\n  // Función para agregar un producto al carrito de compras\n  const addToCart = (product, quantity = 1) => {\n    setCartItems(prevItems => {\n      // Buscar si el producto ya existe en el carrito\n      const existingItem = prevItems.find(item => item.productId === product.id);\n      if (existingItem) {\n        // Si el producto ya existe, actualizar su cantidad respetando el stock\n        return prevItems.map(item => item.productId === product.id ? {\n          ...item,\n          quantity: Math.min(item.quantity + quantity, product.stock || 99)\n        } : item);\n      } else {\n        // Si es un producto nuevo, crear un nuevo item en el carrito\n        const newItem = {\n          id: Date.now(),\n          // ID único para el item del carrito basado en timestamp\n          productId: product.id,\n          // ID del producto original\n          name: product.name,\n          // Nombre del producto\n          price: product.price,\n          // Precio del producto\n          quantity: Math.min(quantity, product.stock || 99),\n          // Cantidad respetando stock\n          imageUrl: product.imageUrl || product.image,\n          // URL de la imagen del producto\n          stock: product.stock || 99,\n          // Stock disponible del producto\n          category: product.category // Categoría del producto\n        };\n        return [...prevItems, newItem]; // Agregar el nuevo item al array existente\n      }\n    });\n  };\n\n  // Función para actualizar la cantidad de un item específico en el carrito\n  const updateQuantity = (itemId, newQuantity) => {\n    if (newQuantity < 1) return; // No permitir cantidades menores a 1\n\n    setCartItems(prevItems => prevItems.map(item => item.id === itemId ? {\n      ...item,\n      quantity: Math.min(newQuantity, item.stock)\n    } // Actualizar cantidad respetando stock\n    : item // Mantener otros items sin cambios\n    ));\n  };\n\n  // Función para remover completamente un item del carrito\n  const removeFromCart = itemId => {\n    setCartItems(prevItems => prevItems.filter(item => item.id !== itemId)); // Filtrar item por ID\n  };\n\n  // Función para vaciar completamente el carrito\n  const clearCart = () => {\n    setCartItems([]); // Resetear array de items\n    // También limpiar el carrito del localStorage\n    const cartKey = getCartKey();\n    localStorage.removeItem(cartKey);\n  };\n\n  // Función para calcular la cantidad total de items en el carrito\n  const getTotalItems = () => {\n    return cartItems.reduce((total, item) => total + item.quantity, 0); // Sumar todas las cantidades\n  };\n\n  // Función para calcular el precio total del carrito\n  const getTotalPrice = () => {\n    return cartItems.reduce((total, item) => total + item.price * item.quantity, 0); // Sumar precio * cantidad de cada item\n  };\n\n  // Función para verificar si un producto específico está en el carrito\n  const isInCart = productId => {\n    return cartItems.some(item => item.productId === productId); // Verificar existencia por ID de producto\n  };\n\n  // Función para obtener la cantidad de un producto específico en el carrito\n  const getProductQuantity = productId => {\n    const item = cartItems.find(item => item.productId === productId); // Buscar item por ID de producto\n    return item ? item.quantity : 0; // Retornar cantidad o 0 si no existe\n  };\n\n  // Objeto con todos los valores y funciones que se proporcionarán a los componentes hijos\n  const value = {\n    cartItems,\n    // Array de items del carrito\n    loading,\n    // Estado de carga\n    addToCart,\n    // Función para agregar productos\n    updateQuantity,\n    // Función para actualizar cantidades\n    removeFromCart,\n    // Función para remover items\n    clearCart,\n    // Función para vaciar carrito\n    getTotalItems,\n    // Función para obtener total de items\n    getTotalPrice,\n    // Función para obtener precio total\n    isInCart,\n    // Función para verificar si producto está en carrito\n    getProductQuantity // Función para obtener cantidad de producto específico\n  };\n\n  // Proveedor del contexto que envuelve los componentes hijos\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s2(CartProvider, \"BIFfpNGL5J6j8s23sjuJO/jADfM=\", false, function () {\n  return [useAuth];\n});\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","jsxDEV","_jsxDEV","CartContext","useCart","_s","context","Error","CartProvider","children","_s2","user","cartItems","setCartItems","loading","setLoading","getCartKey","email","cartKey","savedCart","localStorage","getItem","JSON","parse","error","console","removeItem","setItem","stringify","addToCart","product","quantity","prevItems","existingItem","find","item","productId","id","map","Math","min","stock","newItem","Date","now","name","price","imageUrl","image","category","updateQuantity","itemId","newQuantity","removeFromCart","filter","clearCart","getTotalItems","reduce","total","getTotalPrice","isInCart","some","getProductQuantity","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sebal/Desktop/API v3/API-s-main/frontend/src/context/CartContext.js"],"sourcesContent":["// Importar React y hooks necesarios para el contexto del carrito de compras\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { useAuth } from \"./AuthContext\"; // Importar contexto de autenticación para obtener datos del usuario\n\n// Crear el contexto del carrito que será compartido por toda la aplicación\nconst CartContext = createContext();\n\n// Hook personalizado para acceder al contexto del carrito desde cualquier componente\nexport const useCart = () => {\n  const context = useContext(CartContext); // Obtener el contexto actual\n  if (!context) {\n    // Lanzar error si el hook se usa fuera del CartProvider\n    throw new Error(\"useCart debe ser usado dentro de CartProvider\");\n  }\n  return context; // Retornar el contexto con todas las funciones y estados\n};\n\n// Componente proveedor que envuelve la aplicación y proporciona el estado del carrito\nexport const CartProvider = ({ children }) => {\n  const { user } = useAuth(); // Obtener datos del usuario autenticado\n  const [cartItems, setCartItems] = useState([]); // Estado para almacenar los productos del carrito\n  const [loading, setLoading] = useState(true); // Estado para controlar la carga inicial\n\n  // Función para generar la clave única del carrito basada en el usuario\n  const getCartKey = () => {\n    // Si hay usuario autenticado, usar su email; si no, usar carrito de invitado\n    return user?.email ? `cart_${user.email}` : 'cart_guest';\n  };\n\n  // useEffect que se ejecuta cuando cambia el usuario para cargar su carrito específico\n  useEffect(() => {\n    const cartKey = getCartKey(); // Obtener clave del carrito para el usuario actual\n    const savedCart = localStorage.getItem(cartKey); // Buscar carrito guardado en localStorage\n\n    if (savedCart) {\n      try {\n        setCartItems(JSON.parse(savedCart)); // Parsear y cargar productos del carrito guardado\n      } catch (error) {\n        console.error('Error al cargar carrito:', error);\n        localStorage.removeItem(cartKey); // Eliminar carrito corrupto\n        setCartItems([]); // Resetear carrito si no hay datos guardados\n      }\n    } else {\n      setCartItems([]); // Inicializar carrito vacío si no hay datos guardados\n    }\n    setLoading(false); // Finalizar estado de carga\n  }, [user]); // Dependencia: se ejecuta cuando cambia el usuario\n\n  // useEffect para guardar automáticamente el carrito en localStorage cuando cambie\n  useEffect(() => {\n    if (!loading) { // Solo guardar si no está en estado de carga\n      const cartKey = getCartKey(); // Obtener clave del carrito\n      localStorage.setItem(cartKey, JSON.stringify(cartItems)); // Guardar carrito serializado\n    }\n  }, [cartItems, loading, user]); // Dependencias: carrito, carga y usuario\n\n  // Función para agregar un producto al carrito de compras\n  const addToCart = (product, quantity = 1) => {\n    setCartItems(prevItems => {\n      // Buscar si el producto ya existe en el carrito\n      const existingItem = prevItems.find(item => item.productId === product.id);\n\n      if (existingItem) {\n        // Si el producto ya existe, actualizar su cantidad respetando el stock\n        return prevItems.map(item =>\n          item.productId === product.id\n            ? { ...item, quantity: Math.min(item.quantity + quantity, product.stock || 99) }\n            : item\n        );\n      } else {\n        // Si es un producto nuevo, crear un nuevo item en el carrito\n        const newItem = {\n          id: Date.now(), // ID único para el item del carrito basado en timestamp\n          productId: product.id, // ID del producto original\n          name: product.name, // Nombre del producto\n          price: product.price, // Precio del producto\n          quantity: Math.min(quantity, product.stock || 99), // Cantidad respetando stock\n          imageUrl: product.imageUrl || product.image, // URL de la imagen del producto\n          stock: product.stock || 99, // Stock disponible del producto\n          category: product.category // Categoría del producto\n        };\n        return [...prevItems, newItem]; // Agregar el nuevo item al array existente\n      }\n    });\n  };\n\n  // Función para actualizar la cantidad de un item específico en el carrito\n  const updateQuantity = (itemId, newQuantity) => {\n    if (newQuantity < 1) return; // No permitir cantidades menores a 1\n\n    setCartItems(prevItems =>\n      prevItems.map(item =>\n        item.id === itemId\n          ? { ...item, quantity: Math.min(newQuantity, item.stock) } // Actualizar cantidad respetando stock\n          : item // Mantener otros items sin cambios\n      )\n    );\n  };\n\n  // Función para remover completamente un item del carrito\n  const removeFromCart = (itemId) => {\n    setCartItems(prevItems => prevItems.filter(item => item.id !== itemId)); // Filtrar item por ID\n  };\n\n  // Función para vaciar completamente el carrito\n  const clearCart = () => {\n    setCartItems([]); // Resetear array de items\n    // También limpiar el carrito del localStorage\n    const cartKey = getCartKey();\n    localStorage.removeItem(cartKey);\n  };\n\n  // Función para calcular la cantidad total de items en el carrito\n  const getTotalItems = () => {\n    return cartItems.reduce((total, item) => total + item.quantity, 0); // Sumar todas las cantidades\n  };\n\n  // Función para calcular el precio total del carrito\n  const getTotalPrice = () => {\n    return cartItems.reduce((total, item) => total + (item.price * item.quantity), 0); // Sumar precio * cantidad de cada item\n  };\n\n  // Función para verificar si un producto específico está en el carrito\n  const isInCart = (productId) => {\n    return cartItems.some(item => item.productId === productId); // Verificar existencia por ID de producto\n  };\n\n  // Función para obtener la cantidad de un producto específico en el carrito\n  const getProductQuantity = (productId) => {\n    const item = cartItems.find(item => item.productId === productId); // Buscar item por ID de producto\n    return item ? item.quantity : 0; // Retornar cantidad o 0 si no existe\n  };\n\n  // Objeto con todos los valores y funciones que se proporcionarán a los componentes hijos\n  const value = {\n    cartItems, // Array de items del carrito\n    loading, // Estado de carga\n    addToCart, // Función para agregar productos\n    updateQuantity, // Función para actualizar cantidades\n    removeFromCart, // Función para remover items\n    clearCart, // Función para vaciar carrito\n    getTotalItems, // Función para obtener total de items\n    getTotalPrice, // Función para obtener precio total\n    isInCart, // Función para verificar si producto está en carrito\n    getProductQuantity // Función para obtener cantidad de producto específico\n  };\n\n  // Proveedor del contexto que envuelve los componentes hijos\n  return (\n    <CartContext.Provider value={value}>\n      {children}\n    </CartContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}